#+OPTIONS: toc:t
#+LINK: emacswiki http://www.emacswiki.org/emacs/%s
#+PROPERTY: header-args:sh :results output
* Why?
** Github-hosted repositories
 - Org document (and [[github:github/markup#markups][a number of other formats]] as well) will be rendered as HTML (not without gotchas, though), using [[github:github/markup][GitHub Markup library]].
 - Commits and pull requests that include prose documents have the ability to represent those documents with source and rendered views, see [[https://help.github.com/articles/rendering-differences-in-prose-documents/][Rendering differences in prose documents]].
* Customization
Emacs provides a convenient way to browse, change and save settings via =M-x customize=. By default, it saves these settings to an initialization file, =~/.emacs.d/init.el=. To keep initialization file clean and simple, customizations must go to a separate file:
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
** TODO Refine workflow
Check these resources for more info:
- [[emacswiki:CategoryCustomize]]
- [[emacswiki:CustomizingAndSaving]]

Actual usecase for customization file is:
- set some initial, non-Emacs-default, values;
- configure with code and settings;
- override some settings with a user-defined, per-host, values.

Loading should be deferred and take place as late as possible.

* Backups
By default, Emacs saves backup files (the files ending with =~=) in the current directory. Stash them all under =backups= directory in user's Emacs directory:
#+BEGIN_SRC emacs-lisp
  (defvar mn/backup-directory (expand-file-name "backups" user-emacs-directory))
  (if (not (file-exists-p mn/backup-directory))
          (make-directory mn/backup-directory t))
  (setq backup-directory-alist `((".*" . ,mn/backup-directory)))
#+END_SRC
* Package management
** Bootstrapping el-get
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (el-get-bundle with-eval-after-load-feature)
#+END_SRC
** Install packages over secure connection only
#+BEGIN_SRC emacs-lisp
  (setq el-get-allow-insecure nil)
#+END_SRC
** TODO Removing unnecessary packages
When trying out new packages, its easy to lose track of direct and indirect dependencies of (now) unused packages that could and should be removed, see issues [[github:dimitri/el-get/issues/1782][Removing unnecessary packages]] and [[github:dimitri/el-get/issues/1849][Feature request: el-get-autoremove]].
#+BEGIN_SRC emacs-lisp :tangle no
  (el-get-cleanup (mapcar 'el-get-source-name el-get-sources))
#+END_SRC
* Saving and restoring desktop state between sessions
#+BEGIN_SRC emacs-lisp
  (setq desktop-path (list user-emacs-directory))
  (setq desktop-dirname user-emacs-directory)
#+END_SRC
By default, all the buffers in the desktop are restored at one go and may take quite some time. Do not restore immediately any buffers and let them be restored lazily, when Emacs is idle:
#+BEGIN_SRC emacs-lisp
  (setq desktop-restore-eager 0)
#+END_SRC
And finally enable desktop mode:
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC
* TODO Mode line
- [[github:Malabarba/smart-mode-line]]

#+BEGIN_SRC emacs-lisp
  (el-get-bundle smart-mode-line
    (with-eval-after-load-feature smart-mode-line
      (add-to-list 'custom-safe-themes "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e")
      (if after-init-time (sml/setup)
        (add-hook 'after-init-hook 'sml/setup))
      (sml/apply-theme 'automatic)))
#+END_SRC

There are two forks of original [[emacswiki:powerline.el]] (references [[github:yuanotes/powerline]], now unavailable):
- [[github:milkypostman/powerline]] receiving updates from time to time, at least;
- [[github:jonathanchu/emacs-powerline]] seems abandoned with latest commit on <2014-12-04 Thu> (or it is feature-complete, just works and needs no updates to fix bugs and add new features).

#+BEGIN_SRC emacs-lisp
  (el-get-bundle emacs-powerline
    (defadvice load-theme
        (after theme-reset-powerline (theme &optional no-confirm no-enable) activate)
      (el-get-reload 'emacs-powerline)))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (el-get-bundle helm
    (with-eval-after-load-feature (helm helm-command)
      (setq helm-M-x-fuzzy-match t)
      (helm-mode 1)
      (helm-adaptive-mode 1)
      (helm-autoresize-mode 1)))
#+END_SRC
* TODO Displaying Line and Column Numbers
- show absolute line number on the left fringe using =linum-mode=
- show line number relative to the current line on the right fringe with =linum-relative-mode=
- show on activating point-moving command only
#+BEGIN_SRC emacs-lisp
  (el-get-bundle linum-mode :builtin "22")
  (el-get-bundle linum-relative
    :type http
    :url "https://raw.github.com/emacsmirror/emacswiki.org/master/linum-relative.el")
#+END_SRC
* Buffer management
Use Helm to switch between buffers:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle helm
    (global-set-key (kbd "C-x b") 'helm-buffers-list))
#+END_SRC
* Networking
** Use SOCKS 5 proxy
#+BEGIN_SRC emacs-lisp
  (require 'socks)
  (setq socks-server '("Default server" "localhost" 9050 5)
        url-gateway-method 'socks)
#+END_SRC
** TODO Set proxies conditionally
** TODO Check [[info:emacs-gnutls][Emacs GnuTLS]]
#+BEGIN_QUOTE
The GnuTLS library is an optional add-on for Emacs. Through it, any Emacs Lisp program can establish encrypted network connections that use "Secure Socket Layer" (SSL) and "Transport Layer Security" (TLS) protocols.  The process of using SSL and TLS in establishing connections is as automated and transparent as possible.
#+END_QUOTE
** TODO Review =tls-program= variable
Default list of commands is dangerous as it uses =--insecure= flag when invoking =gnutls-cli= program:
#+BEGIN_SRC emacs-lisp :tangle no
  ("gnutls-cli --insecure -p %p %h"
   "gnutls-cli --insecure -p %p %h --protocols ssl3"
   "openssl s_client -connect %h:%p -no_ssl2 -ign_eof")
#+END_SRC
* Communications
** Encryption
Toggle automatic file encryption/decryption
#+BEGIN_SRC emacs-lisp
  (auto-encryption-mode 1)
#+END_SRC
** Authentication sources
I'm not using =.netrc=, just =.authinfo= but encrypted instead of being it in clear-text:
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC
** Stack Exchange
[[github:vermiculus/sx.el][SX]] provides a versatile experience for the Stack Exchange network within Emacs itself.
#+BEGIN_SRC emacs-lisp
  (el-get-bundle markdown-mode :type github :pkgname "jrblevin/markdown-mode")
  (el-get-bundle let-alist :url "https://raw.githubusercontent.com/emacsmirror/let-alist/master/let-alist.el")
  (el-get-bundle sx)
#+END_SRC
*** TODO Allows insecure TLS communication
Check if [[https://www.reddit.com/r/emacs/comments/3g1u2d/emacs_gnutlscli_invocations_called_with_insecure/][Emacs' gnutls-cli invocations called with --insecure flag? : emacs]] is still apply:
#+BEGIN_QUOTE
When using the stackexchange client for Emacs, I notice this every time in the *Messages* buffer:

 Opening TLS connection to `api.stackexchange.com'...
 Opening TLS connection with `gnutls-cli --insecure -p 443 api.stackexchange.com'...done
 Opening TLS connection to `api.stackexchange.com'...done
#+END_QUOTE
Another option is to switch to the built-in GnuTLS integration.
** TODO Integrate different messaging systems under one umbrella?
- Gnus already provides some backends for working with e-mails, news, RSS;
- Stack Exchange;
- Twitter.
* Version control
** Git
*** magit-revert-buffers is broken with outdated dash.el 		:bug:
Reverting buffers fails due to undefined function =-non-nil=:
#+BEGIN_SRC diff
  @@ -678,8 +678,7 @@ When called interactively then the revert is forced."
               (let ((cnt (length buffers)))
                 (when (> cnt 0)
                   (message "Reverting (up to) %s file-visiting buffer(s)..." cnt)
  -                (setq cnt (length (-non-nil (mapcar #'magit-revert-buffer
  -                                                    buffers))))
  +                (setq cnt (length (mapcar #'magit-revert-buffer buffers)))
                   (if (> cnt 0)
                       (pcase magit-revert-buffers
                         (`t
#+END_SRC

While this change would work, it turned out that I just had an old version of [[github:magnars/dash.el][dash.el]], one of the Magit's dependencies, without function =-non-nil=:
#+BEGIN_SRC sh :dir "~/.emacs.d/el-get/dash" :results format org
  git log -S-non-nil --patch --summary -- *.el
#+END_SRC

#+RESULTS:
#+BEGIN_SRC diff
commit 3adad97d371be9a875f48f8d926c437a7d6c7f6b
Author: Matus Goljer <dota.keys@gmail.com>
Date:   Mon Aug 11 13:53:09 2014 +0200

    Add -non-nil

diff --git a/dash.el b/dash.el
index 43e0349..76a8e75 100644
--- a/dash.el
+++ b/dash.el
@@ -239,6 +239,10 @@ Alias: `-reject'"
   "Return a new list of the non-nil results of applying FN to the items in LIST."
   (--keep (funcall fn it) list))

+(defun -non-nil (list)
+  "Return all non-nil elements of LIST."
+  (-remove 'null list))
+
 (defmacro --map-indexed (form list)
   "Anaphoric form of `-map-indexed'."
   (declare (debug (form form)))
@@ -1579,6 +1583,7 @@ structure such as plist or alist."
                              "--remove"
                              "-reject"
                              "--reject"
+                             "-non-nil"
                              "-keep"
                              "--keep"
                              "-map-indexed"
#+END_SRC

With el-get it is not possible to extend existing package's dependencies, so just amend receipe for =dash=:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle dash :checkout "2.11.0")
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (el-get-bundle magit
    :checkout "2.1.0"
    (global-set-key (kbd "C-x C-z") 'magit-status))

  (el-get-bundle magit-view-file)
#+END_SRC

When committing, show a diff at the bottom of the commit buffer just to remind me of what is going to be committed:
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load-feature (magit-commit)
    (add-to-list 'magit-commit-arguments "--verbose"))
#+END_SRC
*** TODO Why upgrading to 2.2.0
** Integrate Vcsh and Magit
   - open directory [[/vcsh:emacs:.emacs.d/]] or a file [[/vcsh:emacs:.emacs.d/init.el]]
   - =M-x magit-status=
#+BEGIN_SRC emacs-lisp
  (eval-after-load "tramp"
    '(progn
       (defconst tramp-vcsh-method "vcsh"
         "*When this method name is used, forward all calls to VCSH.")

       (setq tramp-methods (delq (assoc tramp-vcsh-method tramp-methods) tramp-methods))
       (add-to-list 'tramp-methods
                    (cons tramp-vcsh-method
                          '((tramp-login-program "vcsh")
                            (tramp-login-args (("enter") ("%h")))
                            (tramp-remote-shell "/bin/sh")
                            (tramp-remote-shell-args ("-c")))))

       (defun tramp-parse-vcsh (_ignore)
         "List all repositories"
         (mapcar (lambda (x) (list nil x)) (split-string (shell-command-to-string "vcsh list"))))
       (tramp-set-completion-function tramp-vcsh-method '((tramp-parse-vcsh "")))))
#+END_SRC
*** TODO Improve filename completion
Vcsh provides a list of all files tracked by all repositories:
#+BEGIN_SRC sh :dir ~
  vcsh list-tracked
#+END_SRC

#+RESULTS:
#+begin_example
/home/mn/.bash_logout
/home/mn/.bashrc
/home/mn/.config/byobu/status
/home/mn/.config/byobu/statusrc
/home/mn/.config/byobu/.tmux.conf
/home/mn/.config/systemd/user/emacs.service
/home/mn/.config/tmux/inx
/home/mn/.config/tmux/xless
/home/mn/.emacs.d/custom.el
/home/mn/.emacs.d/emacs.org
/home/mn/.emacs.d/init.el
/home/mn/.profile
/home/mn/.tmux.conf
#+end_example

or a specific one:
#+BEGIN_SRC sh :dir ~
vcsh list-tracked emacs
#+END_SRC

#+RESULTS:
: /home/mn/.config/systemd/user/emacs.service
: /home/mn/.emacs.d/custom.el
: /home/mn/.emacs.d/emacs.org
: /home/mn/.emacs.d/init.el

Use this feature to provide more fine-grained completion for repositories and files.

#+BEGIN_SRC emacs-lisp :tangle no
  (defconst tramp-vcsh-file-name-handler-alist
    '((expand-file-name . tramp-vcsh-handle-expand-file-name)))

  (add-to-list 'tramp-foreign-file-name-handler-alist
               (cons tramp-vcsh-method 'tramp-vcsh-file-name-handler-alist))

  (defsubst tramp-vcsh-file-name-p (filename)
    "Check if it's a filename for VCSH."
    (let ((v (tramp-dissect-file-name filename)))
      (string= (tramp-file-name-method v) tramp-vcsh-method)))
#+END_SRC
*** TODO Register Vcsh as VC backend
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'vc-handled-backends 'Vcsh)
#+END_SRC
#+BEGIN_SRC emacs-lisp :results silent :tangle no
  (defvar vc-vcsh-master-templates nil "Templates for Vcsh")

  (provide 'vc-vcsh)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results pp output :tangle no :dir ~
  (split-string (shell-command-to-string "vcsh list-tracked"))
#+END_SRC

#+RESULTS:
: ("/home/mn/.bash_logout" "/home/mn/.bashrc" "/home/mn/.config/byobu/status" "/home/mn/.config/byobu/statusrc" "/home/mn/.config/byobu/.tmux.conf" "/home/mn/.config/systemd/user/emacs.service" "/home/mn/.config/tmux/inx" "/home/mn/.config/tmux/xless" "/home/mn/.emacs.d/custom.el" "/home/mn/.emacs.d/emacs.org" "/home/mn/.emacs.d/init.el" "/home/mn/.profile" "/home/mn/.tmux.conf")
** Resolving conflicts
For files with conflict markers, enable SMerge, a minor mode to
quickly navigate between conflicts and choose which to keep:
#+BEGIN_SRC emacs-lisp
  (defun sm-try-smerge ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode 1))))
  (add-hook 'find-file-hook 'sm-try-smerge t)
#+END_SRC
*** TODO Describe default key bindings
*** TODO Enable for files with complete conflict markers
** Integrate Magit and Gerrit Code Review
[[https://www.gerritcodereview.com/][Google Gerrit]] provides web based code review and repository management for the Git version control system.
#+BEGIN_SRC emacs-lisp
  (el-get-bundle magit-gerrit)
#+END_SRC
*** TODO Configuration
By default, will recognize Git repository as Gerrit one only when:
- there is remote with name =origin=;
- this remote's URL uses =SSH= scheme and port =29418=.

In other words, will work with =ssh://user@git.eclipse.org:29418/equinox/rt.equinox.p2= out of the box. Working with non-anonymous HTTPS (like =https://user@git.eclipse.org/r/a/equinox/rt.equinox.p2=) will require setting =magit-gerrit-ssh-creds=.

Seems there is no support for anonymous access via =https://git.eclipse.org/r/a/equinox/rt.equinox.p2=.
* Puppet
#+BEGIN_SRC emacs-lisp
  (el-get-bundle puppet-mode)
  (el-get-bundle flymake-puppet)
#+END_SRC

[[github:librarian-puppet][librarian-puppet]], a manager for the Puppet modules, uses files =Puppetfile=, =Modulefile= or =metadata.json= as a source of modules' dependencies:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Puppetfile$" . puppet-mode))
#+END_SRC
** TODO Missing flymake-puppet -> puppet-mode		     :bug:dependency:
** TODO grimradical/puppet-flymake vs benprew/flymake-puppet - what to chose?
   There are two modes to check Puppet manifests against the Puppetlabs style guide:
   - [[github:grimradical/puppet-flymake]]
   - [[github:benprew/flymake-puppet]]
   Both =(provide 'flymake-puppet)=, use [[https://rubygems.org/gems/puppet-lint][puppet-lint]] and are based on Steve Purcell's [[github:purcell/flymake-coffee][flymake-coffe]]. For now, let use [[github:benprew/flymake-puppet]].
* Working with files
** Open files as another user
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load-feature 'tramp
    (defun mn/sudo-mode-line-function ()
      (when (string-match "^/su\\(do\\)?:" default-directory)
        (setq mode-line-format
              (format-mode-line mode-line-format
                                'font-lock-warning-face))))

    (defvar sudo-tramp-prefix
      "/sudo:"
      (concat "Prefix to be used by sudo commands when building tramp path "))

    (defun mn/sudo-file-name (filename)
      (set 'splitname (split-string filename ":"))
      (if (> (length splitname) 1)
          (progn (set 'final-split (cdr splitname))
                 (set 'sudo-tramp-prefix "/sudo:"))
        (progn (set 'final-split splitname)
               (set 'sudo-tramp-prefix (concat sudo-tramp-prefix "root@localhost:"))))
      (set 'final-fn (concat sudo-tramp-prefix (mapconcat (lambda (e) e) final-split ":")))
      (message "splitname is %s" splitname)
      (message "sudo-tramp-prefix is %s" sudo-tramp-prefix)
      (message "final-split is %s" final-split)
      (message "final-fn is %s" final-fn)
      (message "%s" final-fn))

    (defun mn/sudo-reopen-file ()
      "Reopen file as root by prefixing its name with sudo-tramp-prefix and by clearing buffer-read-only"
      (interactive)
      (let*
          ((file-name (expand-file-name buffer-file-name))
           (sudo-name (mn/sudo-file-name file-name)))
        (progn
          (setq buffer-file-name sudo-name)
          (rename-buffer sudo-name)
          (setq buffer-read-only nil)
          (message (concat "File name set to " sudo-name)))))
    (add-hook 'find-file-hooks 'mn/sudo-mode-line-function)
    (add-hook 'dired-mode-hook 'mn/sudo-mode-line-function))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (el-get-bundle org-mode
    :checkout "release_8.3.1" :checksum "003a0f10695f035e844d844eacb1a86a6d2df934"

    (global-set-key (kbd "C-c .") 'org-time-stamp) ;; insert timestamp everywhere with 'C-c .'
    (global-set-key (kbd "C-c b") 'org-switchb) ;; switch between org buffers with 'C-c b'

    (setq org-modules nil)

    (with-eval-after-load-feature (org-clock)
      ;; http://orgmode.org/manual/Clocking-work-time.html
      (setq org-clock-persist t)
      (org-clock-persistence-insinuate)))
  (org-reload)
#+END_SRC
** TODO Don't tolerate trailing whitespace in Org files
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'org-mode-hook
            '(add-hook 'before-save-hook 'delete-trailing-whitespace))
#+END_SRC
** Agenda
Define a keyboard shortcut to dispatch agenda commands to collect entries to the agenda buffer:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

Pressing =C-c a a= shows the agenda view with current tasks at hands, with minimal distractions:
- starts on the current day;
- shows current day only;
- ignores scheduled but not finished items.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-on-weekday nil
        org-agenda-span 'day
        org-scheduled-past-days 0)
#+END_SRC

Highlight the agenda line under cursor:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-agenda-mode-hook (lambda () (hl-line-mode 1)))
#+END_SRC

All files in a default location to look for Org files will be used for agenda display:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files `(,org-directory))
#+END_SRC
** Custom link types
*** Wikisites dedicated to Emacs
#+BEGIN_SRC emacs-lisp
  (dolist (list '(("emacswiki" . "http://www.emacswiki.org/emacs/%s")
                  ("wikemacs" . "https://wikemacs.org/wiki/%s")))
    (add-to-list 'org-link-abbrev-alist list))
#+END_SRC
*** Debian package
To add link to Debian package, use =deb:= link type followed by package's name, i.e. =deb:python3-minimal=. Opening such link will show package's details with =apt-utils-show-package= (from =apt-utils= feature provided by [[deb:debian-el]] package).
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load-feature (org)
    (defun org-deb-open (package)
      (if (require 'apt-utils nil 'noerror)
          (apt-utils-show-package-1 package t nil)
        (message (format "Unable to open 'deb:%s' link: Debian package debian-el is required" package))))
    (org-add-link-type "deb" 'org-deb-open))
#+END_SRC
**** TODO Provide completion for package name
** A cleaner presentation
- all lines are prefixed for display with the necessary amount of space;
- all headlines are prefixed with additional stars, so that the amount of indentation shifts by =org-indent-indentation-per-level= spaces per level;
- all headline stars but the last one are made invisible;
- enable [[info:emacs#Visual%20Line%20Mode][Visual Line Mode]].

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
                             (setq org-indent-indentation-per-level 1)
                             (org-indent-mode 1)
                             (visual-line-mode 1)))
#+END_SRC
Other ways to achieve almost the same are:
- for all files by customizing the variable =org-startup-indented=
- for individual files using property =#+STARTUP: indent=
** (Re)viewing differences
Fix little inconveniences when viewing differences between org-mode buffers.
*** Comparing using Ediff mode
For each diff selection, that portion of the tree for each buffer is expanded. When moving to a new diff, the previous portion of the tree is collapsed and the area surrounding the new diff location is expanded:
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load-feature (ediff-init org)
    (add-hook 'ediff-select-hook 'mn/ediff-org-unfold-tree)
    (add-hook 'ediff-unselect-hook 'mn/ediff-org-fold-tree)

    (defun mn/ediff-org-showhide (buf command &rest cmdargs)
      "If buffer exists and is org-mode then execute command"
      (if (and buf
               (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode))
          (save-excursion (set-buffer buf) (apply command cmdargs))))

    (defun mn/ediff-org-unfold-tree ()
      "Unfold tree at diff location"
      (mn/ediff-org-showhide ediff-buffer-A 'org-reveal)
      (mn/ediff-org-showhide ediff-buffer-B 'org-reveal)
      (mn/ediff-org-showhide ediff-buffer-C 'org-reveal))

    (defun mn/ediff-org-fold-tree ()
      "Fold tree back to top level"
      (mn/ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
      (mn/ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
      (mn/ediff-org-showhide ediff-buffer-C 'hide-sublevels 1)))
#+END_SRC
*** Jumping from Magit-provided diff
Unfold point of interest after switching to org-mode buffer from the diff section, i.e. from magit-status-mode:
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load-feature (org magit-diff)
    (defun mn/org-reveal-magit-diff-visit-file (FILE &optional OTHER-WINDOW FORCE-WORKTREE)
      "When switching to buffer in `org-mode', show more context with `org-reveal'. See `magit-diff-visit-file'"
      (if (derived-mode-p 'org-mode)
          (org-reveal)))

    (advice-add #'magit-diff-visit-file :after #'mn/org-reveal-magit-diff-visit-file))
#+END_SRC
** Capture
Press =Ctrl-C r= to quickly create:
- task
- note
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org-capture
    (setq org-capture-templates
          '(("t" "Task" entry
             (file "NewTasks.org")
             "* TODO %?\n%U\n%a" :prepend t)
            ("n" "Note" entry
             (file+headline "NewNotes.org" "")
             "* %?\n%U\n%a" :prepend t))))
  (global-set-key (kbd "C-c r") 'org-capture)
#+END_SRC
*** Capturing the web
- Mozilla Firefox as a web browser
- [[https://addons.mozilla.org/firefox/addon/org-mode-capture/][Org-mode Capture extension]] for Firefox that takes notes and registers bookmarks in Org-mode with [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol]]
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  (add-to-list 'org-modules 'org-protocol)
  (require 'org-capture)
  (add-to-list 'org-capture-templates
               '("w" "Web citation" entry (file+headline "NewNotes.org" "")
                 "* %c\n%U\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE"))
#+END_SRC
**** TODO Refine the flow
- =:prepend= to insert newly captured information at the top of the file
- =:immediate-finish= not offer to edit the information, just file it away immediately
- =:kill-buffer= to kill the buffer again after capture is finalized
- =:jump-to-captured= to jump to the captured entry when finished
**** TODO Storing plain links
Another option is [[github:kuanyui/copy-as-org-mode]] which allows to copy the contents in page as Org-mode markup and has some features missing in Org-mode Capture:
- Copy all tabs of current window as a Org list.
- Right click on anywhere of a page and copy the page title with URL as Org.
- Right click on a link and copy it as Org.
- Right click on an image and copy it as Org.
** Working with source code blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
*** Shell
There are two (at least) modes to work with shell code snippets:
- =shell-mode=, major mode for interacting with an inferior shell
- =sh-mode= (=shell-script-mode= is an alias), major mode for editing shell scripts

The latter one should be used for source code blocks, i.e. =#+BEGIN_SRC sh=, and add it to the list of languages which can be evaluated:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-babel-load-languages '(shell . t))
#+END_SRC
*** TODO Navigation between blocks
#+BEGIN_SRC emacs-lisp
  (el-get-bundle hydra)
  (defhydra hydra-org-src-block ()
    "Navigate through source code blocks"
    ("j" org-babel-previous-src-block "Prev")
    ("k" org-babel-next-src-block "Next"))
#+END_SRC
*** TODO Define initial key bindings
*** TODO Splitting source code blocks
Split existing source code block
#+BEGIN_SRC emacs-lisp :tangle no
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+END_SRC
in two
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (load custom-file t)
#+END_SRC
* Legacy configuration
#+BEGIN_SRC emacs-lisp
  ;; yes-or-no -> y-or-n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; disable menu bar and tool bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)

  ;; change current buffer's font size with C-+ and C--
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  ;; edit html files with nxml-mode
  (add-to-list 'auto-mode-alist '("\\.html$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.htm$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xhtml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xhtm$" . nxml-mode))

  ;; Maven POM files
  (add-to-list 'auto-mode-alist '("\\pom.xml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\pom-*.xml$" . nxml-mode))

  ;; Eclipse's project files
  (add-to-list 'auto-mode-alist '("\\.project$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.classpath$" . nxml-mode))

  ; Java deployable artifacts
  (add-to-list 'auto-mode-alist '("\\.jar$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.war$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.ear$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.sar$" . archive-mode))
  ;; BeanShell files
  (add-to-list 'auto-mode-alist '("\\.bsh$" . java-mode))
  ;; AspectJ files
  (add-to-list 'auto-mode-alist '("\\.aj$" . java-mode))

  ;; use markdown mode for *.md files
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

  ;; Gemfile is a Ruby file
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))

  ;; Killing lines, inspired by http://xahlee.org/emacs/emacs_delete_whole_line.html
  ;; - kill the rest of the current line, C-k by default
  ;; - kill the whole line including its terminating newline, C-S-k
  (global-set-key (kbd "C-S-k") 'kill-whole-line)
#+END_SRC
* Lisp
Navigate and edit LISP code with [[github:abo-abo/lispy][Oleh Krehel's lispy]] package:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle swiper)
  (el-get-bundle avy)
  (el-get-bundle iedit :type http :url "https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/iedit.el")
  (el-get-bundle lispy :checkout "0.26.0")
  (add-hook 'emacs-lisp-mode-hook '(lambda () (lispy-mode 1)))
#+END_SRC
** TODO Missing dependency lispy -> swiper 		     :bug:dependency:
* Commands, frequency of use
Originally [[http://ergoemacs.org/emacs/command-frequency.html][Emacs's Command Frequency Statistics]] by Xah Lee, had been replaced with [[github:dacap/keyfreq]]:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle keyfreq
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
* Install other packages
#+BEGIN_SRC emacs-lisp
  (el-get-bundle org-link-travis :pkgname "manandbytes/org-link-travis"
    :depends (org-mode)
    (org-add-link-type "travis-build" 'org-link-travis/open-build-link))

  (el-get-bundle nhexl-mode :type github :pkgname "emacsmirror/nhexl-mode")

  (el-get-bundle crontab-mode
    :checksum f68206c1d10de68ba0685ce4cb14741c7ca7c648
    (add-to-list 'auto-mode-alist '("\\.cron\\(tab\\)?\\'" . crontab-mode))
    (add-to-list 'auto-mode-alist '("cron\\(tab\\)?\\."    . crontab-mode)))
#+END_SRC
** Install and configure packages
#+BEGIN_SRC emacs-lisp :tangle no
  (el-get 'sync)
#+END_SRC
* File formats
** systemd configuration files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.service$" . conf-mode))
#+END_SRC
*** TODO Use for other file extensions and locations
- =.target=, =.socket=, =.link= and some others are valid systemd configuration files' extensions;
- files are in [[file:/usr/lib/systemd]], [[file:/lib/systemd]] and some other places.
** TODO YAML
#+BEGIN_SRC emacs-lisp
  (el-get-bundle yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
#+END_SRC
** TODO Torrent
#+BEGIN_SRC emacs-lisp :tangle no
  (el-get-bundle torrent
    :type http
    :url "https://github.com/kensanata/elisp/raw/master/torrent.el")
#+END_SRC
** EPUB
[[wikipedia:EPUB][.EPUB files]] are just plain ZIP archives, so treat them as such:
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'files
    '(progn
       (add-to-list 'auto-mode-alist '("\\.epub$" . archive-mode))))
  (eval-after-load 'mule
    '(progn
       (add-to-list 'auto-coding-alist '("\\.epub$" . no-conversion))))
#+END_SRC
* Spell checking
El-get tries to reinstall the apt-get package regardless of it's state, so this doesn't work:
#+BEGIN_SRC emacs-lisp :tangle no
  (el-get-bundle apt-get:hunspell)
  (el-get-bundle flyspell :builtin "22" :depends (hunspell))
#+END_SRC
Just use simplified version of recipe:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle flyspell :builtin "22")
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(org-mode-hook text-mode-hook))
    (add-hook hook 'flyspell-mode))
#+END_SRC
* Load local customizations
#+BEGIN_SRC emacs-lisp
  (load custom-file t)
#+END_SRC
* Tips and tricks
** Show the log
The buffer *Messages* is an Emacs' log with a lot of information about whats going on under the hood. The dumb way to swith to this buffer is to treat it as any other buffer and =M-x switch-to-buffer= and select it. Using a default keybinding =C-h e= will show this buffer but without switching to it.
