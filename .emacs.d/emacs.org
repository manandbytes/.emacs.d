* Customization
Emacs provies a convenient way to browse, change and save settings via
=M-x customize=. By default, it saves these settings to an
initialization file, =~/.emacs.d/init.el=. To keep initialization file
clean and simple, save customizations to a separate file:
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+END_SRC
* Backups
By default, Emacs saves backup files (the files ending with =~=) in the current directory. Stash them all under =backups= directory in user's Emacs directory:
#+BEGIN_SRC emacs-lisp
  (defvar mn/backup-directory (expand-file-name "backups" user-emacs-directory))
  (if (not (file-exists-p mn/backup-directory))
          (make-directory mn/backup-directory t))
  (setq backup-directory-alist `((".*" . ,mn/backup-directory)))
#+END_SRC
* Package management
** Bootstrapping el-get
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))
#+END_SRC
* Saving and restoring desktop state between sessions
#+BEGIN_SRC emacs-lisp
  (setq desktop-path (list user-emacs-directory))
  (setq desktop-dirname user-emacs-directory)
#+END_SRC
By default, all the buffers in the desktop are restored at one go and may take quite some time. Do not restore immediately any buffers and let them be restored lazily, when Emacs is idle:
#+BEGIN_SRC emacs-lisp
  (setq desktop-restore-eager 0)
#+END_SRC
And finally enable desktop mode:
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC
* Networking
** Use SOCKS 5 proxy
#+BEGIN_SRC emacs-lisp
  (require 'socks)
  (setq socks-server '("Default server" "localhost" 9050 5)
        url-gateway-method 'socks)
#+END_SRC
** TODO Set proxies conditionally
* Version control
** Git
#+BEGIN_SRC emacs-lisp
  (el-get-bundle magit
    :checkout "2.1.0"
    :after (progn
             (global-set-key (kbd "C-x C-z") 'magit-status)))
  (el-get-bundle magit-view-file)
#+END_SRC
** Integrate Vcsh and Magit
   - open directory [[/vcsh:emacs:.emacs.d/]] or a file [[/vcsh:emacs:.emacs.d/init.el]]
   - =M-x magit-status=
#+BEGIN_SRC emacs-lisp
  (eval-after-load "tramp"
    '(progn
       (defconst tramp-vcsh-method "vcsh"
         "*When this method name is used, forward all calls to VCSH.")

       (setq tramp-methods (delq (assoc tramp-vcsh-method tramp-methods) tramp-methods))
       (add-to-list 'tramp-methods
                    (cons tramp-vcsh-method
                          '((tramp-login-program "vcsh")
                            (tramp-login-args (("enter") ("%h")))
                            (tramp-remote-shell "/bin/sh")
                            (tramp-remote-shell-args ("-c")))))

       (defun tramp-parse-vcsh (_ignore)
         "List all repositories"
         (mapcar (lambda (x) (list nil x)) (split-string (shell-command-to-string "vcsh list"))))
       (tramp-set-completion-function tramp-vcsh-method '((tramp-parse-vcsh "")))))
#+END_SRC
*** TODO Improve filename completion
Vcsh provides a list of all files tracked by all repositories:
#+BEGIN_SRC shell :dir ~
vcsh list-tracked
#+END_SRC

#+RESULTS:
| /home/mn/.bash_logout                       |
| /home/mn/.bashrc                            |
| /home/mn/.config/byobu/status               |
| /home/mn/.config/byobu/statusrc             |
| /home/mn/.config/byobu/.tmux.conf           |
| /home/mn/.config/systemd/user/emacs.service |
| /home/mn/.config/tmux/inx                   |
| /home/mn/.config/tmux/xless                 |
| /home/mn/.emacs.d/custom.el                 |
| /home/mn/.emacs.d/emacs.org                 |
| /home/mn/.emacs.d/init.el                   |
| /home/mn/.profile                           |
| /home/mn/.tmux.conf                         |

or a specific one:
#+BEGIN_SRC shell :dir ~
vcsh list-tracked emacs
#+END_SRC

#+RESULTS:
| /home/mn/.config/systemd/user/emacs.service |
| /home/mn/.emacs.d/custom.el                 |
| /home/mn/.emacs.d/emacs.org                 |
| /home/mn/.emacs.d/init.el                   |

Use this feature to provide more fine-grained completion for repositories and files.

#+BEGIN_SRC emacs-lisp :tangle no
  (defconst tramp-vcsh-file-name-handler-alist
    '((expand-file-name . tramp-vcsh-handle-expand-file-name)))

  (add-to-list 'tramp-foreign-file-name-handler-alist
               (cons tramp-vcsh-method 'tramp-vcsh-file-name-handler-alist))

  (defsubst tramp-vcsh-file-name-p (filename)
    "Check if it's a filename for VCSH."
    (let ((v (tramp-dissect-file-name filename)))
      (string= (tramp-file-name-method v) tramp-vcsh-method)))
#+END_SRC
** Resolving conflicts
For files with conflict markers, enable SMerge, a minor mode to
quickly navigate between conflicts and choose which to keep:
#+BEGIN_SRC emacs-lisp
  (defun sm-try-smerge ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode 1))))
  (add-hook 'find-file-hook 'sm-try-smerge t)
#+END_SRC
*** TODO Describe default keybindings
*** TODO Enable for files with complete conflict markers
* Install other packages
#+BEGIN_SRC emacs-lisp
  (el-get-bundle smex ;; a smart M-x enhancement
    :after (progn
             (global-set-key (kbd "M-x") 'smex)
             (global-set-key (kbd "M-X") 'smex-major-mode-commands)
             (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)))

  (el-get-bundle org-link-travis :pkgname "manandbytes/org-link-travis"
    :depends (org-mode)
    :after (progn
             (org-add-link-type "travis-build" 'org-link-travis/open-build-link)))

  (el-get-bundle nhexl-mode :pkgname "emacsmirror/nhexl-mode")

  (el-get-bundle crontab-mode
    :checksum f68206c1d10de68ba0685ce4cb14741c7ca7c648
    :after (progn
             (add-to-list 'auto-mode-alist '("\\.cron\\(tab\\)?\\'" . crontab-mode))
             (add-to-list 'auto-mode-alist '("cron\\(tab\\)?\\."    . crontab-mode))))
#+END_SRC
** Packages with default configration
#+BEGIN_SRC emacs-lisp
  (dolist
      (package
       '(linum-relative
         command-frequency
         crontab-mode
         helm)
       (el-get-bundle package)))
#+END_SRC
** Install and configure packages
#+BEGIN_SRC emacs-lisp
  (el-get 'sync)
#+END_SRC
* Puppet
#+BEGIN_SRC emacs-lisp
  (el-get-bundle puppet-mode)
  (el-get-bundle flymake-puppet)
#+END_SRC

[[github:librarian-puppet][librarian-puppet]], a manager for the Puppet modules, uses files =Puppetfile=, =Modulefile= or =metadata.json= as a source of modules' dependencies:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Puppetfile$" . puppet-mode))
#+END_SRC
** TODO Missing flymake-puppet -> puppet-mode		     :bug:dependency:
** TODO grimradical/puppet-flymake vs benprew/flymake-puppet - what to chose?
   There are two modes to check Puppet manifests against the Puppetlabs style guide:
   - [[github:grimradical/puppet-flymake]]
   - [[github:benprew/flymake-puppet]]
   Both =(provide 'flymake-puppet)=, use [[https://rubygems.org/gems/puppet-lint][puppet-lint]] and are based on Steve Purcell's [[github:purcell/flymake-coffee][flymake-coffe]]. For now, let use [[github:benprew/flymake-puppet]].
* Org
#+BEGIN_SRC emacs-lisp
  (el-get-bundle org-mode

    ;; http://orgmode.org/manual/Clocking-work-time.html
    (setq org-clock-persist t)
    (org-clock-persistence-insinuate)

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c r") 'org-capture) ;; capture with C-c r
    (global-set-key (kbd "C-c .") 'org-time-stamp) ;; insert timestamp everywhere with 'C-c .'
    (global-set-key (kbd "C-c b") 'org-switchb) ;; switch between org buffers with 'C-c b'

    ;; a link type to show debian's package info using apt-utils-mode
    (when (require 'apt-utils nil 'noerror)
      (require 'org)
      (defun org-deb-open (package)
        (apt-utils-show-package-1 package t nil))
      (org-add-link-type "deb" 'org-deb-open)))
  (org-reload)
#+END_SRC
** Capture
Press =Ctrl-C r= to quickly create:
- task
- note
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org-capture
    (setq org-capture-templates
          '(("t" "Task" entry
             (file "NewTasks.org")
             "* TODO %?\n%U\n%a" :prepend t)
            ("n" "Note" entry
             (file+headline "NewNotes.org" "")
             "* %?\n%U\n%a" :prepend t))))
  (global-set-key (kbd "C-c r") 'org-capture)
#+END_SRC
*** Capturing the web
- Mozilla Firefox as a web browser
- [[https://addons.mozilla.org/firefox/addon/org-mode-capture/][Org-mode Capture extension]] for Firefox that takes notes and registers bookmarks in Org-mode with [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol]]
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  (add-to-list 'org-modules 'org-protocol)
  (require 'org-capture)
  (add-to-list 'org-capture-templates
               '("w" "Web citation" entry (file+headline "NewNotes.org" "")
                 "* %c\n%U\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE" :immediate-finish t))
#+END_SRC
**** TODO Storing plain links
Another option is [[github:kuanyui/copy-as-org-mode]] which allows to copy the contents in page as Org-mode markup and has some features missing in Org-mode Capture:
- Copy all tabs of current window as a Org list.
- Right click on anywhere of a page and copy the page title with URL as Org.
- Right click on a link and copy it as Org.
- Right click on an image and copy it as Org.
** TODO Navigation between source code blocks
#+BEGIN_SRC emacs-lisp
  (el-get-bundle hydra)
  (defhydra hydra-org-src-block ()
    "Navigate through source code blocks"
    ("j" org-babel-previous-src-block "Prev")
    ("k" org-babel-next-src-block "Next"))
#+END_SRC
*** TODO Define initial keybinding
* Legacy configuration
#+BEGIN_SRC emacs-lisp
  ;; yes-or-no -> y-or-n
  (fset 'yes-or-no-p 'y-or-n-p)

  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")

  (add-to-list 'load-path "~/.emacs.d/lisp/")

  ; disable menu bar and tool bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)

  ;; change current buffer's font size with C-+ and C--
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (eval-after-load "tramp"
    '(progn
       (defun mn-sudo-mode-line-function ()
         (when (string-match "^/su\\(do\\)?:" default-directory)
           (setq mode-line-format
                 (format-mode-line mode-line-format
                                   'font-lock-warning-face))))

       (defvar sudo-tramp-prefix
         "/sudo:"
         (concat "Prefix to be used by sudo commands when building tramp path "))

       (defun sudo-file-name (filename)
         (set 'splitname (split-string filename ":"))
         (if (> (length splitname) 1)
             (progn (set 'final-split (cdr splitname))
                    (set 'sudo-tramp-prefix "/sudo:"))
           (progn (set 'final-split splitname)
                  (set 'sudo-tramp-prefix (concat sudo-tramp-prefix "root@localhost:"))))
         (set 'final-fn (concat sudo-tramp-prefix (mapconcat (lambda (e) e) final-split ":")))
         (message "splitname is %s" splitname)
         (message "sudo-tramp-prefix is %s" sudo-tramp-prefix)
         (message "final-split is %s" final-split)
         (message "final-fn is %s" final-fn)
         (message "%s" final-fn))

       (defun sudo-reopen-file ()
         "Reopen file as root by prefixing its name with sudo-tramp-prefix and by clearing buffer-read-only"
         (interactive)
         (let*
             ((file-name (expand-file-name buffer-file-name))
              (sudo-name (sudo-file-name file-name)))
           (progn
             (setq buffer-file-name sudo-name)
             (rename-buffer sudo-name)
             (setq buffer-read-only nil)
             (message (concat "File name set to " sudo-name)))))

       (add-hook 'find-file-hooks 'mn-sudo-mode-line-function)
       (add-hook 'dired-mode-hook 'mn-sudo-mode-line-function)
       )
    )

  ; edit html files with nxml-mode
  (add-to-list 'auto-mode-alist '("\\.html$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.htm$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xhtml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xhtm$" . nxml-mode))

  ;; Maven POM files
  (add-to-list 'auto-mode-alist '("\\pom.xml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\pom-*.xml$" . nxml-mode))

  ;; Eclipse's project files
  (add-to-list 'auto-mode-alist '("\\.project$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.classpath$" . nxml-mode))

  ; Java deployable artifacts
  (add-to-list 'auto-mode-alist '("\\.jar$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.war$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.ear$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.sar$" . archive-mode))
  ;; BeanShell files
  (add-to-list 'auto-mode-alist '("\\.bsh$" . java-mode))
  ;; AspectJ files
  (add-to-list 'auto-mode-alist '("\\.aj$" . java-mode))

  ;; use markdown mode for *.md files
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

  ;; Gemfile is a Ruby file
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))

  ;; Killing lines, inspired by http://xahlee.org/emacs/emacs_delete_whole_line.html
  ;; - kill the rest of the current line, C-k by default
  ;; - kill the whole line including its terminating newline, C-S-k
  (global-set-key (kbd "C-S-k") 'kill-whole-line)
#+END_SRC
* Lisp
Navigate and edit LISP code with [[github:abo-abo/lispy][Oleh Krehel's lispy]] package:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle swiper)
  (el-get-bundle lispy
    (add-hook 'emacs-lisp-mode-hook '(lambda () (lispy-mode 1))))
#+END_SRC
** TODO Missing dependency lispy -> swiper 		     :bug:dependency:
