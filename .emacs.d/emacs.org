* Customization
Emacs provies a convenient way to browse, change and save settings via
=M-x customize=. By default, it saves these settings to an
initialization file, =~/.emacs.d/init.el=. To keep initialization file
clean and simple, save customizations to a separate file:
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+END_SRC
* Networking
** TODO Set proxies conditionally
* Version control
** Resolving conflicts
For files with conflict markers, enable SMerge, a minor mode to
quickly navigate between conflicts and choose which to keep:
#+BEGIN_SRC emacs-lisp
  (defun sm-try-smerge ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode 1))))
  (add-hook 'find-file-hook 'sm-try-smerge t)
#+END_SRC
*** TODO Describe default keybindings
*** TODO Enable for files with complete conflict markers
* Package management
** Bootstrapping el-get
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))
#+END_SRC
** Local recipes
#+BEGIN_SRC emacs-lisp
  (el-get-bundle smex ;; a smart M-x enhancement
    :after (progn
             (global-set-key (kbd "M-x") 'smex)
             (global-set-key (kbd "M-X") 'smex-major-mode-commands)
             (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)))

  (el-get-bundle magit
    :after (progn
             (global-set-key (kbd "C-x C-z") 'magit-status)))

  (el-get-bundle org-mode
    :after (progn
             ;; http://orgmode.org/manual/Clocking-work-time.html
             (setq org-clock-persist t)
             (org-clock-persistence-insinuate)

             (global-set-key (kbd "C-c a") 'org-agenda)
             (global-set-key (kbd "C-c r") 'org-capture) ;; capture with C-c r
             (global-set-key (kbd "C-c .") 'org-time-stamp) ;; insert timestamp everywhere with 'C-c .'
             (global-set-key (kbd "C-c b") 'org-switchb) ;; switch between org buffers with 'C-c b'

             ;; a link type to show debian's package info using apt-utils-mode
             (when (require 'apt-utils nil 'noerror)
               (require 'org)
               (defun org-deb-open (package)
                 (apt-utils-show-package-1 package t nil))
               (org-add-link-type "deb"
                                  'org-deb-open)))
    (org-reload))

  (el-get-bundle org-link-travis :pkgname "manandbytes/org-link-travis"
    :depends (org-mode)
    :after (progn
             (org-add-link-type "travis-build" 'org-link-travis/open-build-link)))

  (el-get-bundle nhexl-mode :pkgname "emacsmirror/nhexl-mode")

  (el-get-bundle crontab-mode
    :checksum f68206c1d10de68ba0685ce4cb14741c7ca7c648
    :after (progn
             (add-to-list 'auto-mode-alist '("\\.cron\\(tab\\)?\\'" . crontab-mode))
             (add-to-list 'auto-mode-alist '("cron\\(tab\\)?\\."    . crontab-mode))))

  (el-get-bundle puppet-flymake :pkgname "grimradical/puppet-flymake")
#+END_SRC
** Packages with default configration
#+BEGIN_SRC emacs-lisp
  (dolist
      (package
       '(linum-relative
         command-frequency
         crontab-mode
         flymake-puppet
         helm
         magit
         magit-view-file
         nhexl-mode
         org-link-travis
         org-mode
         puppet-mode
         smex)
       (el-get-bundle package)))
#+END_SRC
** Install and configure packages
#+BEGIN_SRC emacs-lisp
  (el-get 'sync)
#+END_SRC
* Legacy configuration
#+BEGIN_SRC emacs-lisp
  ;; yes-or-no -> y-or-n
  (fset 'yes-or-no-p 'y-or-n-p)

  (server-start)

  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")

  (add-to-list 'load-path "~/.emacs.d/lisp/")

  ; disable menu bar and tool bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)

  ;; change current buffer's font size with C-+ and C--
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (eval-after-load "tramp"
    '(progn
       (defun mn-sudo-mode-line-function ()
         (when (string-match "^/su\\(do\\)?:" default-directory)
           (setq mode-line-format
                 (format-mode-line mode-line-format
                                   'font-lock-warning-face))))

       (defvar sudo-tramp-prefix
         "/sudo:"
         (concat "Prefix to be used by sudo commands when building tramp path "))

       (defun sudo-file-name (filename)
         (set 'splitname (split-string filename ":"))
         (if (> (length splitname) 1)
             (progn (set 'final-split (cdr splitname))
                    (set 'sudo-tramp-prefix "/sudo:"))
           (progn (set 'final-split splitname)
                  (set 'sudo-tramp-prefix (concat sudo-tramp-prefix "root@localhost:"))))
         (set 'final-fn (concat sudo-tramp-prefix (mapconcat (lambda (e) e) final-split ":")))
         (message "splitname is %s" splitname)
         (message "sudo-tramp-prefix is %s" sudo-tramp-prefix)
         (message "final-split is %s" final-split)
         (message "final-fn is %s" final-fn)
         (message "%s" final-fn))

       (defun sudo-reopen-file ()
         "Reopen file as root by prefixing its name with sudo-tramp-prefix and by clearing buffer-read-only"
         (interactive)
         (let*
             ((file-name (expand-file-name buffer-file-name))
              (sudo-name (sudo-file-name file-name)))
           (progn
             (setq buffer-file-name sudo-name)
             (rename-buffer sudo-name)
             (setq buffer-read-only nil)
             (message (concat "File name set to " sudo-name)))))

       (add-hook 'find-file-hooks 'mn-sudo-mode-line-function)
       (add-hook 'dired-mode-hook 'mn-sudo-mode-line-function)
       )
    )

  ;; integrate vcsh and magit
  ;; - open directory '/vcsh:<repo>:.'
  ;; - M-x magit-status
  (eval-after-load "tramp"
    '(progn
       (add-to-list 'tramp-methods '("vcsh"
                                     (tramp-login-program "vcsh")
                                     (tramp-login-args
                                      (("enter")
                                       ("%h")))
                                     (tramp-remote-shell "/bin/sh")
                                     (tramp-remote-shell-args
                                      ("-c"))))

       (defun tramp-parse-vcsh (_ignore)
         "List all repositories"
         (mapcar (lambda (x) (list nil x)) (split-string (shell-command-to-string "vcsh list"))))
       (tramp-set-completion-function "vcsh" '((tramp-parse-vcsh "")))
       )
    )

  ; edit html files with nxml-mode
  (add-to-list 'auto-mode-alist '("\\.html$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.htm$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xhtml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xhtm$" . nxml-mode))

  ;; Maven POM files
  (add-to-list 'auto-mode-alist '("\\pom.xml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\pom-*.xml$" . nxml-mode))

  ;; Eclipse's project files
  (add-to-list 'auto-mode-alist '("\\.project$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.classpath$" . nxml-mode))

  ; Java deployable artifacts
  (add-to-list 'auto-mode-alist '("\\.jar$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.war$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.ear$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.sar$" . archive-mode))
  ;; BeanShell files
  (add-to-list 'auto-mode-alist '("\\.bsh$" . java-mode))
  ;; AspectJ files
  (add-to-list 'auto-mode-alist '("\\.aj$" . java-mode))

  ;; use markdown mode for *.md files
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

  ;; Gemfile is a Ruby file
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))

  ;; Puppet files
  (add-to-list 'auto-mode-alist '("Puppetfile$" . puppet-mode))
  (add-hook 'puppet-mode-hook 'flymake-puppet-load)

  ;; Killing lines, inspired by http://xahlee.org/emacs/emacs_delete_whole_line.html
  ;; - kill the rest of the current line, C-k by default
  ;; - kill the whole line including its terminating newline, C-S-k
  (global-set-key (kbd "C-S-k") 'kill-whole-line)
#+END_SRC
* Lisp
Navigate and edit LISP code with [[github:abo-abo/lispy][Oleh Krehel's lispy]] package:
#+BEGIN_SRC emacs-lisp
  (el-get-bundle swiper)
  (el-get-bundle lispy
    (add-hook 'emacs-lisp-mode-hook '(lambda () (lispy-mode 1))))
#+END_SRC
** TODO Missing dependency lispy -> swiper 		     :bug:dependency:
